plugins {
    id 'java'
}

ext.finalName = "sebas-gradle-app"

group 'de.hsbo.fbg.kswe'
version '0.0.1-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

jar {
    archiveFileName = "${finalName + '.' + archiveExtension.get()}"
    manifest {
        attributes 'Main-Class': 'de.hsbo.fbg.kswe.HelloGradle'
    }
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task buildAndCopyJar(type: Copy, dependsOn: build) {
    from './build/libs'
    into './build/target'
}

// Option 1: Erstellen einer Java-Klasse Logger.
// Die Instanziierung sowie der Methodenaufruf innerhalb eines Tasks.
task logBuild() {
    Date date = new Date();
    Logger logger = new Logger("./build.log");
    logger.log(String.format("Build successfull: %s\n", date.toString()))
}

class Logger {
    private String path;
    private String file;

    public Logger(String path) {
        this.path = path;
        this.file = new File(path);
    }

    public void log(String content) {
        BufferedWriter writer = new BufferedWriter(new FileWriter(file, true));
        writer.append(content);
        writer.close();
    }
}

// Option 2: Erstellen eines eigenen Task-Typs, der von DefaultTask abgeleitet ist.
// Die auszuf√ºhrende Methode wird mit @TaskAction definiert. Nun lassen sich neue Tasks definieren, die vom Typ diese
// Tasks sind und die Konfigurationsparameter belegen.
task logTask(type: LoggerTask) {
    path "./build.log"
    content String.format("Build successfull: %s\n", new Date().toString())
}

class LoggerTask extends DefaultTask {

    @Input
    String path;
    @Input
    String content;

    @TaskAction
    def log() {
        BufferedWriter writer = new BufferedWriter(new FileWriter(path, true));
        writer.append(content);
        writer.close();
    }
}

build.finalizedBy(logBuild)